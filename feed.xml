<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://shadab-shaikh.de/feed.xml" rel="self" type="application/atom+xml"/><link href="https://shadab-shaikh.de/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-19T11:37:52+00:00</updated><id>https://shadab-shaikh.de/feed.xml</id><title type="html">Shadab Shaikh</title><subtitle>My Personal Website. </subtitle><entry><title type="html">Automating TensorFlow Lite Builds with GitHub Actions for Raspberry Pi and x86</title><link href="https://shadab-shaikh.de/blog/2025/tflite/" rel="alternate" type="text/html" title="Automating TensorFlow Lite Builds with GitHub Actions for Raspberry Pi and x86"/><published>2025-01-19T01:00:00+00:00</published><updated>2025-01-19T01:00:00+00:00</updated><id>https://shadab-shaikh.de/blog/2025/tflite</id><content type="html" xml:base="https://shadab-shaikh.de/blog/2025/tflite/"><![CDATA[<p>Automation is the backbone of modern software development, and GitHub Actions makes it easier than ever to build, test, and deploy software projects. When it comes to TensorFlow Lite, automating the build process ensures consistent, reliable results across platforms like <strong>Raspberry Pi (64-bit)</strong> and <strong>x86 (64-bit)</strong>. This blog focuses on how GitHub Actions can simplify and streamline the CI/CD process for TensorFlow Lite builds, enabling developers to focus on innovation rather than manual setup.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/tflite_ci_cd-480.webp 480w,/assets/img/tflite_ci_cd-800.webp 800w,/assets/img/tflite_ci_cd-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/tflite_ci_cd.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Leveraging GitHub Actions for CI/CD. </div> <h2 id="why-use-github-actions-for-tensorflow-lite">Why Use GitHub Actions for TensorFlow Lite?</h2> <p>You can find the complete implementation and source code in the GitHub repository: <a href="https://github.com/shadab205/tflite-build">tflite-build</a>.</p> <p>Building TensorFlow Lite for specific platforms involves managing dependencies, configuring toolchains, and handling cross-compilation challenges. GitHub Actions automates this process, providing:</p> <ol> <li><strong>Consistency</strong>: Ensures builds are repeatable and reliable.</li> <li><strong>Efficiency</strong>: Automates time-consuming tasks like dependency installation and configuration.</li> <li><strong>Scalability</strong>: Supports multiple architectures (Raspberry Pi 64-bit and x86).</li> <li><strong>Accessibility</strong>: Produces precompiled <code class="language-plaintext highlighter-rouge">.deb</code> packages for easy deployment.</li> </ol> <h2 id="cicd-workflow-overview">CI/CD Workflow Overview</h2> <p>Using GitHub Actions, the CI/CD pipeline includes the following steps:</p> <ol> <li><strong>Cloning the TensorFlow Repository</strong>: <ul> <li>Automates pulling the latest code from TensorFlow’s GitHub repository.</li> </ul> </li> <li><strong>Installing Dependencies</strong>: <ul> <li>Handles installation of Bazel, Python, and necessary cross-compilation toolchains.</li> </ul> </li> <li><strong>Building TensorFlow Lite</strong>: <ul> <li>Builds the TensorFlow Lite shared library for both Raspberry Pi and x86 architectures.</li> </ul> </li> <li><strong>Packaging into <code class="language-plaintext highlighter-rouge">.deb</code> Files</strong>: <ul> <li>Creates Debian packages for streamlined installation.</li> </ul> </li> <li><strong>Uploading Artifacts</strong>: <ul> <li>Publishes precompiled packages to the GitHub Releases page.</li> </ul> </li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/tflite-cicd-ghactions-480.webp 480w,/assets/img/tflite-cicd-ghactions-800.webp 800w,/assets/img/tflite-cicd-ghactions-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/tflite-cicd-ghactions.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> CI/CD pipeline ensures high-quality TensorFlow Lite builds. </div> <h2 id="supported-platforms">Supported Platforms</h2> <h3 id="raspberry-pi">Raspberry Pi</h3> <ul> <li><strong>Boards:</strong> <ul> <li>Raspberry Pi 3 Model A+</li> <li>Raspberry Pi 3 Model B+</li> <li>Raspberry Pi 4 Model B</li> </ul> </li> <li><strong>OS:</strong> <ul> <li>Raspberry Pi OS Bookworm 64-bit</li> </ul> </li> </ul> <h3 id="x86">x86</h3> <ul> <li><strong>Note:</strong> <ul> <li>Does not support <code class="language-plaintext highlighter-rouge">avxnnint8</code>. This flag is disabled to ensure compatibility.</li> </ul> </li> <li><strong>Tested on:</strong> <ul> <li>x86 64-bit machine running Ubuntu 22.04.</li> </ul> </li> </ul> <h2 id="installation">Installation</h2> <h3 id="raspberry-pi-64-bit">Raspberry Pi (64-bit)</h3> <p>Download and install the precompiled <code class="language-plaintext highlighter-rouge">.deb</code> package:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/&lt;your-repo&gt;/releases/latest/download/tensorflowlite-elinux_aarch64.deb
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> ./tensorflowlite-elinux_aarch64.deb
</code></pre></div></div> <h3 id="x86-64-bit">x86 (64-bit)</h3> <p>Download and install the precompiled <code class="language-plaintext highlighter-rouge">.deb</code> package:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/&lt;your-repo&gt;/releases/latest/download/tensorflowlite-amd64.deb
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> ./tensorflowlite-amd64.deb
</code></pre></div></div> <h2 id="code-example-using-tensorflow-lite">Code Example: Using TensorFlow Lite</h2> <p>Here’s an example of how to use the TensorFlow Lite library in your C++ project:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"tensorflow/lite/interpreter.h"</span><span class="cp">
#include</span> <span class="cpf">"tensorflow/lite/kernels/register.h"</span><span class="cp">
#include</span> <span class="cpf">"tensorflow/lite/model.h"</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Load the TensorFlow Lite model</span>
    <span class="k">auto</span> <span class="n">model</span> <span class="o">=</span> <span class="n">tflite</span><span class="o">::</span><span class="n">FlatBufferModel</span><span class="o">::</span><span class="n">BuildFromFile</span><span class="p">(</span><span class="s">"model.tflite"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">model</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Failed to load model</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Build the interpreter</span>
    <span class="n">tflite</span><span class="o">::</span><span class="n">ops</span><span class="o">::</span><span class="n">builtin</span><span class="o">::</span><span class="n">BuiltinOpResolver</span> <span class="n">resolver</span><span class="p">;</span>
    <span class="n">tflite</span><span class="o">::</span><span class="n">InterpreterBuilder</span><span class="p">(</span><span class="o">*</span><span class="n">model</span><span class="p">,</span> <span class="n">resolver</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">interpreter</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">interpreter</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Failed to construct interpreter</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Allocate tensor buffers</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">interpreter</span><span class="o">-&gt;</span><span class="n">AllocateTensors</span><span class="p">()</span> <span class="o">!=</span> <span class="n">kTfLiteOk</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Failed to allocate tensors</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"TensorFlow Lite initialized successfully!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="benefits-of-automation">Benefits of Automation</h2> <ol> <li><strong>Ease of Deployment</strong>: <ul> <li>Precompiled <code class="language-plaintext highlighter-rouge">.deb</code> packages simplify the installation process for end-users.</li> </ul> </li> <li><strong>Reproducibility</strong>: <ul> <li>Every build follows the same process, ensuring consistent results.</li> </ul> </li> <li><strong>Cross-Platform Compatibility</strong>: <ul> <li>Supports both Raspberry Pi (64-bit) and x86 architectures.</li> </ul> </li> </ol> <h2 id="reference">Reference</h2> <ol> <li><a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/lite">TensorFlow Lite Repository</a></li> <li><a href="https://docs.github.com/actions">GitHub Actions Documentation</a></li> </ol> <hr/> <p>With GitHub Actions, you can automate TensorFlow Lite builds for Raspberry Pi and x86 platforms, streamlining development and deployment processes. Try it out and simplify your workflows!</p>]]></content><author><name></name></author><category term="automation"/><category term="TensorFlowLite"/><category term="RaspberryPi"/><category term="x86"/><category term="Automation"/><category term="GitHubActions"/><category term="CI/CD"/><category term="OpenSource"/><summary type="html"><![CDATA[Streamlining TensorFlow Lite builds using GitHub Actions for Raspberry Pi 64-bit and x86 platforms.]]></summary></entry><entry><title type="html">An introduction on Remote Photoplythesmograpy and the uses in ADAS systems.</title><link href="https://shadab-shaikh.de/blog/2024/rppg/" rel="alternate" type="text/html" title="An introduction on Remote Photoplythesmograpy and the uses in ADAS systems."/><published>2024-05-26T22:00:00+00:00</published><updated>2024-05-26T22:00:00+00:00</updated><id>https://shadab-shaikh.de/blog/2024/rppg</id><content type="html" xml:base="https://shadab-shaikh.de/blog/2024/rppg/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>The heart rate is defined as the number of times a heart beats per minute, as the work done by the person increases HR increases. HR variation has a huge significance to medicine, psychology and many other fields. At present standard technique to measure HR is electrocardiogram(ECG). This system will comprise of a video-based Photoplethysmogram(PPG) that will provide a contact-free determination of a person’s Heart Rate. It will use face detection for ROI constrained near-real time signal analysis. The rPPG based system will eliminate the limitations of the contact based PPG techniques.</p> <h2 id="objectives">OBJECTIVES</h2> <ul> <li>The main objective is to remotely measure the live heart rate of a person.</li> <li>To study the concepts of face detection in Region Of Interest extraction.</li> <li>To study the concepts of face detection in Region Of Interest extraction.</li> <li>To work on face colour analysis in order to determine the Heart Rate of the test subject.</li> </ul> <div class="row justify-content-md-center"> <div class="col-9 justify-content-md-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/roi-480.webp 480w,/assets/img/roi-800.webp 800w,/assets/img/roi-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/roi.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Region of Interest for the rPPG measurement. </div> <h2 id="proposed-method">Proposed method</h2> <h3 id="input-video">Input Video</h3> <p>RGB sensor like a Camera will be used to input to video to the system.</p> <h3 id="pre-processing">Pre-Processing</h3> <p>This stage includes ROI definition and tracking using a suitable face detection algorithm.</p> <h3 id="extraction-of-ppg-signal">Extraction Of PPG Signal</h3> <p>This stage includes decomposing the video frame into its RGB components which will be used for PPG signal analysis.</p> <h3 id="peak-detection-and-hr-estimation">Peak detection and HR Estimation</h3> <p>From the filtered data the peaks will be plotted and the heart rate parameter will be extracted.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/rppg-block-diagram.JPG-480.webp 480w,/assets/img/rppg-block-diagram.JPG-800.webp 800w,/assets/img/rppg-block-diagram.JPG-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/rppg-block-diagram.JPG" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Block diagram of the rPPG methodology. </div> <h2 id="summary">Summary</h2> <ul> <li>Small changes due to the heart beat which are invisible to human eye can be detected by the camera and processed on a computer to read out the live pulse of the person.</li> <li>The data can be processed over time to predict diseases like Heart-Attack or Hypertension.</li> <li>By using the contact less PPG technique the need for extra equipment for pulse measurement is eliminated.</li> </ul>]]></content><author><name></name></author><category term="project"/><category term="ADAS"/><category term="MedicalSystems"/><category term="Matlab"/><category term="PPG"/><category term="OpenSource"/><summary type="html"><![CDATA[An introduction and an application to the remote photoplethesmography technique.]]></summary></entry><entry><title type="html">Unlock the Precision in Power Electronics Control with Space Vector PWM</title><link href="https://shadab-shaikh.de/blog/2024/svpwm/" rel="alternate" type="text/html" title="Unlock the Precision in Power Electronics Control with Space Vector PWM"/><published>2024-04-28T22:00:00+00:00</published><updated>2024-04-28T22:00:00+00:00</updated><id>https://shadab-shaikh.de/blog/2024/svpwm</id><content type="html" xml:base="https://shadab-shaikh.de/blog/2024/svpwm/"><![CDATA[<p>The Space Vector Pulse Width Modulation (SVPWM) technique is revolutionizing power control in electric drives and renewable energy systems. SVPWM offers unparalleled efficiency and precise voltage synthesis and control in motor control and power conversion applications. It offers numerous advantages and benefits such as reducing torque ripple to optimizing motor performance.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/svpwm-480.webp 480w,/assets/img/svpwm-800.webp 800w,/assets/img/svpwm-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/svpwm.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> SVPWM Waveform. <a href="https://www.researchgate.net/publication/325779367_A_novel_model_of_optimal_hybrid_control_in_a_space_vector_modulation_SVM_for_voltage_source_inverter_control">source</a> </div> <p>Moreover, with today’s microcontroller technology, implementing SVPWM has never been easier. By writing efficient code, engineers can unleash the full potential of SVPWM, enabling real-time control and optimization. Whether it’s fine-tuning motor parameters or enhancing grid-tied inverters, mastering SVPWM code unlocks a world of possibilities in power electronics innovation.</p> <p>You can find my opensource MIT Licensed C Language SVPWM library here: <a href="https://github.com/shadab205/C_SVPWM">github</a></p> <p>Here is how to use in in your Project:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// let it the MCU's hardware counter compare registers is: CCR0, CCR1, CCR2</span>
    <span class="cp">#include</span> <span class="cpf">"svpwm.h"</span><span class="cp">
</span>
    <span class="c1">// updatable voltages in Alpha-Beta coordinates:</span>
    <span class="kt">float</span> <span class="n">NewAlphaVoltage</span><span class="p">,</span> <span class="n">NewBetaVoltage</span><span class="p">;</span>

    <span class="c1">// 1st step: create and initialize the global variable of user data structure</span>
    <span class="n">tSVPWM</span> <span class="n">sSVPWM</span> <span class="o">=</span> <span class="n">SVPWM_DEFAULTS</span><span class="p">;</span>

    <span class="c1">// 2nd step: do some settings</span>
    <span class="n">sSVPWM</span><span class="p">.</span><span class="n">enInType</span> <span class="o">=</span> <span class="n">AlBe</span><span class="p">;</span>  <span class="c1">// set the input type</span>
    <span class="n">sSVPWM</span><span class="p">.</span><span class="n">fUdc</span> <span class="o">=</span> <span class="mi">537</span><span class="p">.</span><span class="mi">0</span><span class="n">f</span><span class="p">;</span>    <span class="c1">// set the DC-Link voltage in Volts</span>
    <span class="n">sSVPWM</span><span class="p">.</span><span class="n">fUdcCCRval</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span> <span class="c1">// set the Max value of counter compare register which equal to DC-Link voltage</span>
    <span class="n">sSVPWM</span><span class="p">.</span><span class="n">enOutType</span> <span class="o">=</span> <span class="n">centerAligned</span><span class="p">;</span> <span class="c1">//set center aligned PWM output type</span>

    <span class="p">...</span>
    <span class="p">...</span>
    <span class="p">...</span>

    <span class="c1">// 3rd step: Next code must be executed every time a new calculation of duty cycles is needed</span>
    <span class="c1">// PWM interrupt / the main ISR </span>
    <span class="p">{</span>        
      <span class="p">...</span>
      <span class="p">...</span>
      <span class="p">...</span>

      <span class="n">sSVPWM</span><span class="p">.</span><span class="n">fUal</span> <span class="o">=</span> <span class="n">NewAlphaVoltage</span><span class="p">;</span>	<span class="c1">// set a new value of voltage Alpha</span>
      <span class="n">sSVPWM</span><span class="p">.</span><span class="n">fUbe</span> <span class="o">=</span> <span class="n">NewBetaVoltage</span><span class="p">;</span>	<span class="c1">// set a new value of voltage Beta</span>
      <span class="n">sSVPWM</span><span class="p">.</span><span class="n">m_calc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sSVPWM</span><span class="p">);</span>		<span class="c1">// call the SVPWM duty cycles calculation function</span>
      <span class="n">CCR0</span> <span class="o">=</span> <span class="n">sSVPWM</span><span class="p">.</span><span class="n">fCCRA</span><span class="p">;</span>		<span class="c1">// update the duty cycle value in CCR0</span>
      <span class="n">CCR1</span> <span class="o">=</span> <span class="n">sSVPWM</span><span class="p">.</span><span class="n">fCCRB</span><span class="p">;</span>		<span class="c1">// update the duty cycle value in CCR1</span>
      <span class="n">CCR2</span> <span class="o">=</span> <span class="n">sSVPWM</span><span class="p">.</span><span class="n">fCCRC</span><span class="p">;</span>		<span class="c1">// update the duty cycle value in CCR2</span>
      <span class="p">...</span>
      <span class="p">...</span>
      <span class="p">...</span>
    <span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="library"/><category term="PowerElectronics"/><category term="RenewableEnergy"/><category term="SVPWM"/><category term="Microcontrollers"/><category term="SVPWM"/><category term="EngineeringCode"/><category term="OpenSource"/><summary type="html"><![CDATA[Introduction to the Library C_SVPWM]]></summary></entry></feed>